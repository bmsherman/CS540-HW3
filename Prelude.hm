data Bool() of True() | False();
data Unit() of Unit();

seq(x, y) = y;

error(message : String) : a = case message {};
undefined() = error("undefined");

-- Integer operations
plus(x : Int, y : Int) : Int = undefined();
minus(x : Int, y : Int) : Int = undefined();
times(x : Int, y : Int) : Int = undefined();
div(x : Int, y : Int) : Int = undefined();
negate(x : Int) : Int = undefined();

ltInt(x : Int, y : Int) : Bool() = undefined();
lteInt(x : Int, y : Int) : Bool() = undefined();
eqInt(x : Int, y : Int) : Bool() = undefined();
gteInt(x : Int, y : Int) : Bool() = undefined();
gtInt(x : Int, y : Int) : Bool() = undefined();

-- Arrays
data Array(a);

makeArray(size : Int, defaultVal : a) : Array(a) = undefined();

set(arr : Array(a), pos : Int, val : a) : Unit() = undefined();

get(arr : Array(a), pos : Int) : a = undefined();

setAll(arr : Array(a), size : Int, val : a) : Unit() = 
  setAllHelper(arr, size, val, 0);

setAllHelper(arr : Array(a), size : Int, val : a, idx : Int) = 
  case idx < size
    { True() => set(arr, idx, val) >> setAllHelper(arr, size, val, idx + 1)
    | False() => Unit()
    };


-- IO 
out_string(x : String) : Int = undefined();
out_int(x : Int) : Int = undefined();
in_int() : Int = undefined();
