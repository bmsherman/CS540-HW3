data Stream(a) of Cons(a, (a) -> Stream(a));
data And(a, b) of And(a, b);

printStream(print, xs) = case xs
  { Cons(x, f) => print(x) >> printStream(print, f(x))
  };

factStream(accum) = case accum
  { And(acc, n) => Cons(And(acc * n, n + 1), factStream) };

accumPrinter(accum) = case accum
  { And(acc, n) => out_int(acc) >> out_string("\n")
  };

finStream(accum) = case accum
  { And(n, lim) => case n < lim
    { True() => Cons( And(n + 1, lim), finStream )
    | False() => Cons( And(0, lim), finStream )
    }
  };

main() = printStream(accumPrinter, finStream(And(0, 10)));
