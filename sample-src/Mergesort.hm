data List(a) of Nil() | Cons(a, List(a));
data And(a, b) of And(a, b);

dealHelper(tf, ls, rs, xs) = case xs
  { Nil() => And(ls, rs)
  | Cons(y, ys) => case tf
    { True() => dealHelper(False(), Cons(y, ls), rs, ys)
    | False() => dealHelper(True(), ls, Cons(y, rs), ys)
    }
  };

deal(xs) = dealHelper(True(), [], [], xs);

merge(lte, xs, ys) = case xs
  { Nil() => ys
  | Cons(a, as) => case ys
    { Nil() => xs
    | Cons(b, bs) => case lte(a, b)
      { True() => Cons(a, merge(lte, as, ys))
      | False() => Cons(b, merge(lte, xs, bs))
      }
    }
  };

isSmall(xs) = case xs
  { Nil() => True()
  | Cons(y, ys) => case ys
    { Nil() => True()
    | Cons(z, zs) => False()
    }
  };

mergesort(lte, xs) = case isSmall(xs) 
  { True() => xs
  | False() => case deal(xs)
    { And(ls, rs) => merge(lte, mergesort(lte, ls) , mergesort(lte, rs) ) }
  };

listLine(print, xs) = case xs
  { Nil() => 0
  | Cons(y, ys) => print(y) >> out_string("\n") >> listLine(print, ys)
  };

main() = listLine(out_int, mergesort(lteInt, [13, 5, 2, 10, 3]));
