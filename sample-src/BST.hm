-- import List.hm
data Ordering() of LT() | EQ() | GT();
data TreeI(a) of Leaf() | Branch(a, TreeI(a), TreeI(a));
data Tree(a) of Tree((a, a) -> Ordering() , TreeI(a));

inOrder(tree) = case tree
  { Leaf() => Nil()
  | Branch(x, l, r) => append(inOrder(l), Cons(x, inOrder(r)))
  };

compareInt(x, y) = case x < y
  { True() => LT()
  | False() => case x == y
    { True() => EQ()
    | False() => GT()
    }
  };


-- Some binary search tree operations

insertBSTI(ord, x, tree) = case tree
  { Leaf() => Branch(x, Leaf(), Leaf())
  | Branch(y, l, r) => case ord(x, y)
    { LT() => Branch(y, insertBSTI(ord, x, l), r)
    | EQ() => Branch(x, l, r)
    | GT() => Branch(y, l, insertBSTI(ord, x, r))
    }
  };

insertBST(x, tree) = case tree
  { Tree(ord, treeI) => insertBSTI(ord, x, treeI) };

memberBSTI(ord, x, tree) = case tree
  { Leaf() => False()
  | Branch(y, l, r) => case ord(x,y)
    { LT() => memberBSTI(ord, x, l)
    | EQ() => True()
    | GT() => memberBSTI(ord, x, r)
    }
  };

memberBST(x, tree) = case tree 
  { Tree(ord, treeI) => memberBSTI(ord, x, treeI) };

listToBSTI(ord, xs) = case xs
  { Nil() => Leaf()
  | Cons(y, ys) => insertBSTI(ord, y, listToBSTI(ord, ys))
  };

listToBST(ord, xs) = Tree(ord, listToBSTI(ord, xs));

printBool(x) = case x
  { True() => out_string("True")
  | False() => out_string("False")
  };

main() = printBool(memberBST(32, listToBST(compareInt, [5,32,56,1,10])));
