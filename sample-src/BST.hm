-- linked lists
data List(a) of Cons(a, List(a)) | Nil();

data Ordering() of LT() | EQ() | GT();

-- binary trees
data TreeI(a) of Leaf() | Branch(a, TreeI(a), TreeI(a));

-- binary trees with a notion of ordering on the elements
data Tree(a) of Tree( (a, a) -> Ordering() , TreeI(a) );

append(xs, ys) = case xs
  { Nil() => ys
  | Cons(x, xs') => Cons(x, append(xs', ys))
  };

-- in-order traversal of a tree
inOrder(tree : TreeI(a)) : List(a) = case tree
  { Leaf() => Nil()
  | Branch(x, l, r) => append(inOrder(l), Cons(x, inOrder(r)))
  };

compareInt(x, y) = case x < y
  { True() => LT()
  | False() => case x == y
    { True() => EQ()
    | False() => GT()
    }
  };


-- Some binary search tree operations

-- Insert an element into a binary search tree. If an equal element is
-- already present, replace it with the new element.
insertBSTI(ord, x, tree) = case tree
  { Leaf() => Branch(x, Leaf(), Leaf())
  | Branch(y, l, r) => case ord(x, y)
    { LT() => Branch(y, insertBSTI(ord, x, l), r)
    | EQ() => Branch(x, l, r)
    | GT() => Branch(y, l, insertBSTI(ord, x, r))
    }
  };

insertBST(x, tree) = case tree
  { Tree(ord, treeI) => Tree(ord, insertBSTI(ord, x, treeI)) };

--Does an element exist in a binary search tree?
memberBSTI(ord, x, tree) = case tree
  { Leaf() => False()
  | Branch(y, l, r) => case ord(x,y)
    { LT() => memberBSTI(ord, x, l)
    | EQ() => True()
    | GT() => memberBSTI(ord, x, r)
    }
  };

memberBST(x, tree) = case tree 
  { Tree(ord, treeI) => memberBSTI(ord, x, treeI) };

-- Make a binary search tree from a list using a given comparison operator.
listToBSTI(ord, xs) = case xs
  { Nil() => Leaf()
  | Cons(y, ys) => insertBSTI(ord, y, listToBSTI(ord, ys))
  };

listToBST(ord, xs) = Tree(ord, listToBSTI(ord, xs));

printBool(x) = case x
  { True() => out_string("True")
  | False() => out_string("False")
  };

-- Sort a list by creating a binary search tree and then flattening it
-- with an in-order traversal
treeSort(ord, xs) = case listToBST(ord, xs) 
  { Tree(ord', tree) => inOrder(tree) };

-- An example use of these binary search tree functions
main() = printBool(memberBST(32, listToBST(compareInt, [5,32,56,1,10])));
